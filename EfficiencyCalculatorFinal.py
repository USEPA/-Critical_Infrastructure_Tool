# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2020-05-04 12:12:30
"""
import arcpy
from sys import argv
import os
import pandas
import json
import arcpy, sys, os, arcgis, requests 
import urllib
import urllib.request
import subprocess
from shutil import copyfile

def wrapArg(s):
    if len(str(s).split(' ')) <= 1:
        return s
    return (f"\"{s}\"")

def getAgri(den, num):
	if float(num) > 0 and float(den) > 0:
		return (1 - float(num)/float(den))*100
	else:
		return 0
def getWater(den, num):
	if float(num) > 0 and float(den) > 0:
		return (1 - float(num)/float(den))*100
	else:
		return 0
def getEnergy(den, num, den1, num1):
	if float(num) > 0 and float(den) > 0:
		val = (1 - float(num)/float(den))*100
		val1 = (1 - float(num1)/float(den1))*100
		return (val + val1)/2
	else:
		return 0

def getGov(den, num, den1, num1, den2, num2):
	if float(num) > 0 and float(den) > 0:
		val = (1 - float(num)/float(den))*100
		val1 = (1 - float(num1)/float(den1))*100
		val2 = (1 - float(num2)/float(den2))*100
		return (val + val1 + val2)/3
	else:
		return 0

def createLayerFromAPI(url, name, OutputPath):
        outputLocation= OutputPath + "\\"+name
        response = urllib.request.urlopen(url)
        path_parent = os.path.dirname(arcpy.env.workspace)
        data = json.loads(response.read())
        path = outputLocation + ".json"
        with open(path, 'w+') as f:
             json.dump(data, f, indent=2)
        arcpy.JSONToFeatures_conversion(path, arcpy.env.workspace + "\\" + name, "POINT")
        arcpy.JSONToFeatures_conversion(path, path_parent + "\\Interim Files\\" + name, "POINT")

def createFarmland(farmland, incident_shapefile, area_of_interest, OutputPath):
        import arcpy
        count = 0
        # Fetch each feature from the cursor and examine the extent properties
        
        #extent = row[0].extent
        #arcpy.AddMessage('Extent of place:')
        #arcpy.AddMessage('XMin: {}, YMin: {}'.format(extent.XMin, extent.YMin))
        #arcpy.AddMessage('XMax: {}, YMax: {}'.format(extent.XMax, extent.YMax))
        #arcpy.env.overwriteOutput = True
        # Process: Add Geometry Attributes (Add Geometry Attributes) (management)
        area_shapefile_copy = arcpy.env.workspace + "\\farm_copy"
        arcpy.CopyFeatures_management(area_of_interest, area_shapefile_copy)
        arcpy.management.AddGeometryAttributes(Input_Features=area_shapefile_copy, Geometry_Properties=["EXTENT"],
                                Length_Unit="", Area_Unit="",
                                Coordinate_System="PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',\
        SPHEROID['WGS_1984',6378137.0,298.257223563]],\
        PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],\
        PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]]")
        for row in arcpy.da.SearchCursor(area_shapefile_copy, ['EXT_MIN_X', 'EXT_MAX_X', 'EXT_MIN_Y', 'EXT_MAX_Y']):
                rectangle = '{} {} {} {}'.format(row[0], row[2], row[1], row[3])
                clipped_output = arcpy.env.workspace + "\\Clipped_Farmland"
                clipped_test = OutputPath + "\\Clipped_Farm"
                clipped = arcpy.Clip_management(farmland,rectangle,clipped_output)
                #arcpy.Clip_management(farmland,rectangle,clipped_test)
        # Set local variables
        inRaster = clipped_output
        outPolygons = arcpy.env.workspace + "\\clipped_farm_polygon"
        field = "Simplified Class"
        
        # Execute RasterToPolygon
        arcpy.RasterToPolygon_conversion(inRaster, outPolygons, "NO_SIMPLIFY", field)
        affected_sector = OutputPath + "\\affected_farms"
        arcpy.Intersect_analysis(in_features=[outPolygons,incident_shapefile],
                                 out_feature_class=affected_sector+".shp",join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        sector_in_area = OutputPath + "\\farms"
        arcpy.Intersect_analysis(in_features=[outPolygons,area_of_interest],
                                 out_feature_class=sector_in_area,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        area1 = 0
        count= 0
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp", Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        arcpy.management.AddGeometryAttributes(Input_Features=sector_in_area+".shp", Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        for row in arcpy.da.SearchCursor(affected_sector+".shp", ["AREA_GEO", "gridcode"]):
                if int(row[1])<3:
                        count += 1
                        area1 += float(row[0])
        area2 = 0
        for row in arcpy.da.SearchCursor(sector_in_area+".shp", ["AREA_GEO", "gridcode"]):
                if int(row[1])<3:
                        area2 += float(row[0])
        if(area2 == 0):
                area2 = 100
        return ((1-area1/area2)*100) 
        
        
def getHIFLDlayers(OutputPath):
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/6ac5e325468c4cb9b905f1728d6fbf0f_0.geojson", "Hospital_Locations_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/155761d340764921ab7fb2e88257bd97_0.geojson", "Landfills_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/4b9bac25263047c19e617d7bd7b30701_0.geojson", "Wastewater_Treatment_Plants_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/ee0263bd105d41599be22d46107341c3_0.geojson", "Power_Plants_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/1b6e231f88814aceb30fb6ad3ff86014_0.geojson", "Major_State_Government_Buildings_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/0835ba2ed38f494196c14af8407454fb_0.geojson", "Cellular_Towers_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/ec4d868ea1354fc9a85fe35e7db0cffd_0.geojson", "Land_Mobile_Broadcast_Tower_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/0ccaf0c53b794eb8ac3d3de6afdb3286_0.geojson", "Fire_Stations_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/335ccc7c0684453fad69d8a64bc89192_0.geojson", "Urgent_Care_Facilities_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/362c9480f12e4587b6a502f9ceedccde_0.geojson", "Emergency_Medical_Center_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/02013eaa0e1e4cc59658fe9e1c7ac703_0.geojson", "Ports_HIFLD", OutputPath)
        
        
def getPercentage(name, shapefile, Infrastructure_Dataset, ScenarioDataset, buffer, OutputPath, farmland = False):
        arcpy.env.overwriteOutput = True
        path_parent = os.path.dirname(arcpy.env.workspace)
        sector_in_area = arcpy.env.workspace + "\\possible_"+name
        arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [shapefile, ""]],
                             out_feature_class=sector_in_area, join_attributes="ALL", cluster_tolerance="", output_type="INPUT")
        buffered_in_area =arcpy.env.workspace + "\\buffered_"+name
        arcpy.Buffer_analysis(sector_in_area, buffered_in_area, buffer, "FULL", "ROUND")
        dissolved_sector = arcpy.env.workspace + "\\dissolved_"+name
        arcpy.Dissolve_management(buffered_in_area, dissolved_sector)
        affected_sector = OutputPath + "\\affected_"+name
        affected_buffered_sector = OutputPath + "\\affected_buffered_"+name
        arcpy.Intersect_analysis(in_features=[dissolved_sector,ScenarioDataset],
                                 out_feature_class=affected_sector,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
##        arcpy.Intersect_analysis(in_features=[buffered_in_area,ScenarioDataset],
##                                 out_feature_class=affected_buffered_sector,join_attributes="ALL",
##                                 cluster_tolerance="", output_type="INPUT")
        
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp", Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        arcpy.management.AddGeometryAttributes(Input_Features=dissolved_sector, Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
##        arcpy.management.AddGeometryAttributes(Input_Features=buffered_in_area, Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
##        arcpy.management.AddGeometryAttributes(Input_Features=affected_buffered_sector+".shp", Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")


        affected_stats = arcpy.env.workspace + "\\affected_stats_"+name
        dissolved_stats = arcpy.env.workspace + "\\dissolved_stats_"+name
##        buffered_stats = arcpy.env.workspace + "\\buffered_stats_"+name
##        affected_buffered_stats = arcpy.env.workspace + "\\affected_buffered_stats_"+name

        arcpy.analysis.Statistics(in_table=affected_sector+".shp", out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]], case_field=[])
        arcpy.analysis.Statistics(in_table=dissolved_sector, out_table=dissolved_stats, statistics_fields=[["AREA_GEO", "SUM"]], case_field=[])
##        arcpy.analysis.Statistics(in_table=affected_buffered_sector+".shp", out_table=affected_buffered_stats, statistics_fields=[["AREA_GEO", "SUM"]], case_field=[])
##        arcpy.analysis.Statistics(in_table=buffered_in_area, out_table=buffered_stats, statistics_fields=[["AREA_GEO", "SUM"]], case_field=[])
        
        #arcpy.TabulateIntersection_analysis(dissolved_sector, "OBJECTID", ScenarioDataset, affected_sector)
        
        cursor = arcpy.da.SearchCursor(affected_stats, "SUM_AREA_GEO")
        results = 0
        count = 0
        for row in cursor:
                results = row[0]
                count +=1
        cursor2 = arcpy.da.SearchCursor(dissolved_stats, "SUM_AREA_GEO")
        results2 = 100
        for row in cursor2:
                results2 = row[0]

##        cursor3 = arcpy.da.SearchCursor(buffered_stats, "SUM_AREA_GEO")
##        results3 = 100
##        for row in cursor3:
##                results3 = row[0]
##
##        cursor4 = arcpy.da.SearchCursor(affected_buffered_stats, "SUM_AREA_GEO")
##        results4 = 0
##        for row in cursor4:
##                results4 = row[0]
        return ((1-results/results2)*100)

def EfficiencyCalculator(ScenarioDataset="dissolved2", Infrastructure_Dataset="HoustonBlocks", OutputPath = "C:/Documents", GUI_Tool_Location = "C:/Documents"):  # EfficiencyCalculator
    arcpy.AddMessage("Entered Calculator") 
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True
    path_parent = os.path.dirname(arcpy.env.workspace)
    arcpy.AddMessage("Entered workspace") 
    # Process: Infrastructure Counts (Summary Statistics)
    filepath = os.getcwd()
    arcpy.AddMessage("Got CMd") 
    # Process: Intersect (Intersect) 
    Affected_Area = arcpy.env.workspace + "\\intersect"
    arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [ScenarioDataset, ""]],
                             out_feature_class=Affected_Area, join_attributes="ALL", cluster_tolerance="", output_type="INPUT")

    #HIFLD counts
    #getHIFLDlayers(OutputPath)
    
    (waste) = getPercentage("landfill", "Landfills_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (ports) = getPercentage("ports", "Ports_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (power_plants) = getPercentage("plants", "Power_Plants_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)

    (wastewater) = getPercentage("wastewater", "Wastewater_Treatment_Plants_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (hospitals) = getPercentage("hospitals", "Hospital_Locations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (gov) = getPercentage("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (comm) = getPercentage("cell", "Cellular_Towers_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (broadcast) = getPercentage("broad", "Land_Mobile_Broadcast_Tower_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    comm = (comm + broadcast)/2
    (roads) = getPercentage("roads", "USA_Roads", Infrastructure_Dataset, ScenarioDataset, "0.25 Mile", OutputPath)
    (fire) = getPercentage("fire", "Fire_Stations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (ems) = getPercentage("ems", "Emergency_Medical_Center_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)

    farm = createFarmland("USA_Soils_Farmland_Class", ScenarioDataset, Infrastructure_Dataset, OutputPath)
            
    # Process: Affected Infrastructure Statistics (Summary Statistics)

##    arcpy.AddMessage("Water Efficiency: " + str(round(wastewater2, 2)) + "%")
##    arcpy.AddMessage("Energy Efficiency: " + str(round(power_plants2, 2)) + "%")
##    arcpy.AddMessage("Transport Efficiency: " + str(round(roads2, 2)) + "%")
##    arcpy.AddMessage("Communications Efficiency: " + str(round(comm2, 2)) + "%")
##    arcpy.AddMessage("Government Efficiency: " + str(round(gov2, 2)) + "%")
##    arcpy.AddMessage("Emergency Efficiency: " + str(round(ems2, 2)) + "%")
##    arcpy.AddMessage("Waste Efficiency: " + str(round(waste2, 2)) + "%")
##    #arcpy.AddMessage("Healthcare Efficiency: " + str(round(healthcare_percent, 2)) + "%")
##    arcpy.AddMessage("Healthcare Efficiency: " + str(round(hospitals2, 2)) + "%")
##
    # Process: Calculate Agriculture Percent (Calculate Value) 
    #agriculture_percent = getAgri(Agriculture_Count, Agriculture_Count_2_)
    agriculture_percent = farm

    # Process: Calculate Water Percent (Calculate Value) 
    #water_percent = (getWater(Comm4_Count,Comm4_Count_2_) + wastewaster)/2
    water_percent = wastewater

    # Process: Calculate Energy Percent (Calculate Value)
    energy_percent = power_plants

    # Process: Calculate Transport Percent (Calculate Value) 
    #transport_percent = getEnergy(Comm4_Count,Comm4_Count_2_, Comm1_Count,Comm1_Count_2_)
    transport_percent = (roads + ports)/2

    # Process: Calculate Comm Percent (Calculate Value)
    comm_percent = comm

    # Process: Calculate Government Percent (Calculate Value) 
    government_percent = gov

    # Process: Calculate Emergency Percent (Calculate Value) 
    emergency_percent = (fire + ems)/2

    # Process: Calculate Healthcare Percent (Calculate Value)
    healthcare_percent = hospitals

    arcpy.AddMessage("Water Efficiency: " + str(round(water_percent, 2)) + "%")
    arcpy.AddMessage("Energy Efficiency: " + str(round(energy_percent, 2)) + "%")
    arcpy.AddMessage("Transport Efficiency: " + str(round(transport_percent, 2)) + "%")
    arcpy.AddMessage("Communications Efficiency: " + str(round(comm_percent, 2)) + "%")
    arcpy.AddMessage("Government Efficiency: " + str(round(government_percent, 2)) + "%")
    arcpy.AddMessage("Agriculture Efficiency: " + str(round(agriculture_percent, 2)) + "%")
    arcpy.AddMessage("Emergency Efficiency: " + str(round(emergency_percent, 2)) + "%")
    arcpy.AddMessage("Waste Efficiency: " + str(round(waste, 2)) + "%")
    #arcpy.AddMessage("Healthcare Efficiency: " + str(round(healthcare_percent, 2)) + "%")
    arcpy.AddMessage("Healthcare Efficiency: " + str(round(hospitals, 2)) + "%")
    #GUI_Tool_Location_small = GUI_Tool_Location.replace("\"", "")
    #arcpy.AddMessage(GUI_Tool_Location_small)
    #entries = os.listdir(r'{0}'.format(input(GUI_Tool_Location)))
##    for entry in entries:
##            arcpy.AddMessage(entry)
    
    fileLoc = os.path.join(GUI_Tool_Location, "infrastructures_inputs.txt")
    json_data = open(str(fileLoc))
    data = json.load(json_data)
    path_parent = os.path.dirname(arcpy.env.workspace)
    copyfile(fileLoc, path_parent + "\\" + "infrastructures_inputs.txt")
    defaultPath = GUI_Tool_Location + "\\default.csv"
    copyfile(defaultPath, path_parent + "\\" + "default.csv")
    inputsFile = GUI_Tool_Location + "\\report_inputs.txt"
    copyfile(inputsFile, path_parent + "\\" + "report_inputs.txt")
    
    n0new = [water_percent, energy_percent, transport_percent, comm, gov,
             agriculture_percent, emergency_percent, waste, healthcare_percent]

    data["n0"] = n0new
    inputsPath = os.path.join(GUI_Tool_Location, "infrastructures_inputs.txt")
    arcpy.AddMessage(GUI_Tool_Location)
    with open(inputsPath, "w") as outfile:
        json.dump(data, outfile)
    with open(path_parent + "\\" + "infrastructures_inputs.txt", "w") as outfile:
        json.dump(data, outfile)
    #p = subprocess.Popen("C:\Repos\SIRM\InfrastructureRemediation\dist\infrastructures_gui\infrastructures_gui.exe",shell=True)

    newPath = wrapArg(GUI_Tool_Location +  "\\infrastructures_gui.exe")
    command_prompt = "cmd /k " + newPath
    os.system(command_prompt)

            
if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=arcpy.env.workspace, workspace=arcpy.env.workspace):
            #EfficiencyCalculator(*(argsFixed))
            arcpy.AddMessage("Entering Calculator")            
            EfficiencyCalculator(*argv[1:])
