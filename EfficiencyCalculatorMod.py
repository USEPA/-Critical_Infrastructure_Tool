# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2020-05-04 12:12:30
"""
import arcpy
from sys import argv
import os
import pandas as pd
import json
import arcpy, sys, os, arcgis, requests 
import urllib
import urllib.request
import subprocess
from shutil import copyfile
from arcgis.geometry import Geometry
from arcgis.geocoding import reverse_geocode
import shutil  


def wrapArg(s):
    if len(str(s).split(' ')) <= 1:
        return s
    return (f"\"{s}\"")

def getAgri(den, num):
	if float(num) > 0 and float(den) > 0:
		return (1 - float(num)/float(den))*100
	else:
		return 0
def getWater(den, num):
	if float(num) > 0 and float(den) > 0:
		return (1 - float(num)/float(den))*100
	else:
		return 0
def getEnergy(den, num, den1, num1):
	if float(num) > 0 and float(den) > 0:
		val = (1 - float(num)/float(den))*100
		val1 = (1 - float(num1)/float(den1))*100
		return (val + val1)/2
	else:
		return 0

def getGov(den, num, den1, num1, den2, num2):
	if float(num) > 0 and float(den) > 0:
		val = (1 - float(num)/float(den))*100
		val1 = (1 - float(num1)/float(den1))*100
		val2 = (1 - float(num2)/float(den2))*100
		return (val + val1 + val2)/3
	else:
		return 0

def getInfName(infrastructures):
    if "Wastewater" in infrastructures:
        return "CWP_NAME"
    if "Roads" in infrastructures:
        return "Information"
    if "Land_Mobile" in infrastructures or "Cellular" in infrastructures:
        return "LICENSEE"
    if "Ports" in infrastructures:
        return "nav_unit_n"
    if "Industrial" in infrastructures:
        return "SITE_NAME"
##    if "Hospitals" in infrastructures:
##        return "NAME_1"
##    if "Medical" in infrastructures:
##        return "NAME_1"
    # Landfills, Government, Power plants, Urgent Care, Fire Stations, Hospitals, EMC
    return "NAME"

def getLatName(infrastructures):
    if "Ports" in infrastructures:
        return "latitude11"
    if "Roads" in infrastructures:
        return "Information"
    if "Land_Mobile" in infrastructures or "Cellular" in infrastructures:
        return "LAT_DMS"
    if "Wastewater" in infrastructures:
        return "CWP_STREET"
    if "Fire" in infrastructures:
        return "ADDRESS"
    if "Urgent_Care" in infrastructures:
        return "X"
    # Landfills, Government, Power plants, Urgent Care, Fire Stations, Hospitals, EMC
    return "LATITUDE"

def getLongName(infrastructures):
    if "Ports" in infrastructures:
        return "longitude1"
    if "Roads" in infrastructures:
        return "Information"
    if "Cellular" in infrastructures or "Land_Mobile" in infrastructures:
        return "LON_DMS"
    if "Wastewater" in infrastructures:
        return "CWP_CITY"
    if "Fire" in infrastructures:
        return "CITY"
    if "Urgent_Care" in infrastructures:
        return "Y"
    # Landfills, Government, Power plants, Urgent Care, Fire Stations, Hospitals, EMC
    return "LONGITUDE"

def getColumns(infrastructures):
    if "Wastewater" in infrastructures or "Fire" in infrastructures:
        return ("Address", "City")
    return ("Latitude", "Longitude")
    

def getAffectedInfrastructures(contaminated_shapefile, infrastructures, iname, OutputPath, GUIPath, other = False):
    #arcpy.AddMessage("Made it to the affected")
    path_parent = os.path.dirname(arcpy.env.workspace)
    outPolygons = OutputPath + "\\contaminated_" + iname +".shp"
    arcpy.Intersect_analysis(in_features=[infrastructures, contaminated_shapefile],
                                 out_feature_class=outPolygons)
    infrastructureName = getInfName(infrastructures)
    latname = getLatName(infrastructures)
    longname = getLongName(infrastructures)
    (name1, name2) = getColumns(infrastructures)
    newPath = GUIPath + "//Contaminated//" + iname + "_contaminated.csv"
    GISPath = path_parent + "//Contaminated//" + iname + "_contaminated.csv"
    if other:
        results = pd.DataFrame({"Building Name":[]})
        if arcpy.management.GetCount(outPolygons)[0] == "0":
            results.to_csv(GISPath)
            results.to_csv(newPath)
            return
        fdList = [infrastructureName]
        for row in arcpy.da.SearchCursor(outPolygons, [infrastructureName]):
            #arcpy.AddMessage(row)
            results = results.append({"Building Name": row[0]}, ignore_index=True)
        #rcpy.AddMessage(results)
        results.to_csv(GISPath)
        results.to_csv(newPath)
    else: 
        results = pd.DataFrame({"Building Name":[], name1:[], name2:[]})
        if arcpy.management.GetCount(outPolygons)[0] == "0":
            #newPath = GUIPath + "//Contaminated//" + iname + "_contaminated.csv"
            results.to_csv(newPath)
            results.to_csv(GISPath)
        fdList = [infrastructureName, latname, longname]
        for row in arcpy.da.SearchCursor(outPolygons, [infrastructureName, latname, longname]):
            #arcpy.AddMessage(row)
            results = results.append({"Building Name": row[0], name1: row[1], name2: row[2]}, ignore_index=True)
        #rcpy.AddMessage(results)
        results.to_csv(GISPath)
        results.to_csv(newPath)

def createFarmland(farmland, incident_shapefile, area_of_interest, OutputPath):
        import arcpy
        count = 0
        # Fetch each feature from the cursor and examine the extent properties

        # Process: Add Geometry Attributes (Add Geometry Attributes) (management)
        area_shapefile_copy = arcpy.env.workspace + "\\farm_copy"
        arcpy.CopyFeatures_management(area_of_interest, area_shapefile_copy)
        arcpy.management.AddGeometryAttributes(Input_Features=area_shapefile_copy, Geometry_Properties=["EXTENT"],
                                Length_Unit="", Area_Unit="",
                                Coordinate_System="PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',\
        SPHEROID['WGS_1984',6378137.0,298.257223563]],\
        PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],\
        PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]]")
        for row in arcpy.da.SearchCursor(area_shapefile_copy, ['EXT_MIN_X', 'EXT_MAX_X', 'EXT_MIN_Y', 'EXT_MAX_Y']):
                rectangle = '{} {} {} {}'.format(row[0], row[2], row[1], row[3])
                clipped_output = arcpy.env.workspace + "\\Clipped_Farmland"
                clipped_test = OutputPath + "\\Clipped_Farm"
                clipped = arcpy.Clip_management(farmland,rectangle,clipped_output)
                #arcpy.Clip_management(farmland,rectangle,clipped_test)
        # Set local variables
        inRaster = clipped_output
        outPolygons = arcpy.env.workspace + "\\clipped_farm_polygon"
        field = "Simplified Class"
        
        # Execute RasterToPolygon
        arcpy.RasterToPolygon_conversion(inRaster, outPolygons, "NO_SIMPLIFY", field)
        affected_sector = OutputPath + "\\affected_farms"
        arcpy.Intersect_analysis(in_features=[outPolygons,incident_shapefile],
                                 out_feature_class=affected_sector+".shp",join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        sector_in_area = OutputPath + "\\farms"
        arcpy.Intersect_analysis(in_features=[outPolygons,area_of_interest],
                                 out_feature_class=sector_in_area,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        area1 = 0
        count= 0
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp", Geometry_Properties=["AREA_GEODESIC"],
                                               Area_Unit="Square meters")
        arcpy.management.AddGeometryAttributes(Input_Features=sector_in_area+".shp", Geometry_Properties=["AREA_GEODESIC"],
                                               Area_Unit="Square meters")
        for row in arcpy.da.SearchCursor(affected_sector+".shp", ["AREA_GEO", "gridcode"]):
                if int(row[1])<3:
                        count += 1
                        area1 += float(row[0])
        area2 = 0
        for row in arcpy.da.SearchCursor(sector_in_area+".shp", ["AREA_GEO", "gridcode"]):
                if int(row[1])<3:
                        area2 += float(row[0])
        if(area2 == 0):
                area2 = 100
        return ((1-area1/area2)*100) 
        
        
def getHIFLDlayers(OutputPath):
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/6ac5e325468c4cb9b905f1728d6fbf0f_0.geojson",
                           "Hospital_Locations_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/155761d340764921ab7fb2e88257bd97_0.geojson",
                           "Landfills_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/4b9bac25263047c19e617d7bd7b30701_0.geojson",
                           "Wastewater_Treatment_Plants_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/ee0263bd105d41599be22d46107341c3_0.geojson",
                           "Power_Plants_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/1b6e231f88814aceb30fb6ad3ff86014_0.geojson",
                           "Major_State_Government_Buildings_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/0835ba2ed38f494196c14af8407454fb_0.geojson",
                           "Cellular_Towers_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/ec4d868ea1354fc9a85fe35e7db0cffd_0.geojson",
                           "Land_Mobile_Broadcast_Tower_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/0ccaf0c53b794eb8ac3d3de6afdb3286_0.geojson",
                           "Fire_Stations_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/335ccc7c0684453fad69d8a64bc89192_0.geojson",
                           "Urgent_Care_Facilities_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/362c9480f12e4587b6a502f9ceedccde_0.geojson",
                           "Emergency_Medical_Center_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/02013eaa0e1e4cc59658fe9e1c7ac703_0.geojson",
                           "Ports_HIFLD", OutputPath)
        
        
def getPercentage(name, shapefile, Infrastructure_Dataset, ScenarioDataset, buffer, OutputPath, contaminated = False, farmland = False):
        arcpy.env.overwriteOutput = True
        path_parent = os.path.dirname(arcpy.env.workspace)
        sector_in_area = arcpy.env.workspace + "\\possible_"+name
        arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [shapefile, ""]],
                             out_feature_class=sector_in_area, join_attributes="ALL", cluster_tolerance="",
                                 output_type="INPUT")
        buffered_in_area =arcpy.env.workspace + "\\buffered_"+name
        arcpy.Buffer_analysis(sector_in_area, buffered_in_area, buffer, "FULL", "ROUND")
        dissolved_sector = arcpy.env.workspace + "\\dissolved_"+name
        arcpy.Dissolve_management(buffered_in_area, dissolved_sector)
        affected_sector = OutputPath + "\\affected_"+name
        affected_buffered_sector = OutputPath + "\\affected_buffered_"+name
        arcpy.Intersect_analysis(in_features=[dissolved_sector,ScenarioDataset],
                                 out_feature_class=affected_sector,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")

        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp",
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        arcpy.management.AddGeometryAttributes(Input_Features=dissolved_sector,
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")

        affected_stats = arcpy.env.workspace + "\\affected_stats_"+name
        dissolved_stats = arcpy.env.workspace + "\\dissolved_stats_"+name

        arcpy.analysis.Statistics(in_table=affected_sector+".shp", out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        arcpy.analysis.Statistics(in_table=dissolved_sector, out_table=dissolved_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        
        cursor = arcpy.da.SearchCursor(affected_stats, "SUM_AREA_GEO")
        results = 0
        count = 0
        for row in cursor:
            results += row[0]
            count +=1
        cursor2 = arcpy.da.SearchCursor(dissolved_stats, "SUM_AREA_GEO")
        results2 = 100
        for row in cursor2:
            results2 += row[0]
        area_contaminated = results
        #arcpy.AddMessage(name+ " " + str(area_contaminated))
        if contaminated:
            return ((results/results2)*100)
        return ((1-results/results2)*100)

def EfficiencyCalculator(ScenarioDataset="dissolved2", Contaminated_Dataset = "contaminated", Infrastructure_Dataset="HoustonBlocks",
                         OutputPath = "C://Documents", GUI_Tool_Location = "C://Documents"):  # EfficiencyCalculator
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True
    path_parent = os.path.dirname(arcpy.env.workspace)
    # Process: Infrastructure Counts (Summary Statistics)
    filepath = os.getcwd()
    # Process: Intersect (Intersect) 
    Affected_Area = arcpy.env.workspace + "\\intersect"
    arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [ScenarioDataset, ""]],
                             out_feature_class=Affected_Area, join_attributes="ALL", cluster_tolerance="", output_type="INPUT")

    #HIFLD counts
    #getHIFLDlayers(OutputPath)
    if os.path.isdir(path_parent + "//Contaminated"):
        shutil.rmtree(path_parent + "//Contaminated")
    if os.path.isdir(GUI_Tool_Location + "//Contaminated"):
        shutil.rmtree(GUI_Tool_Location + "//Contaminated")
    os.mkdir(path_parent + "//Contaminated")
    os.mkdir(GUI_Tool_Location + "//Contaminated")
    
    (waste) = round(getPercentage("landfills", "Landfills_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath),2)
    (waste_contaminated) = round(getPercentage("landfills", "Landfills_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.5 Mile", OutputPath, True),2)
    getAffectedInfrastructures(Contaminated_Dataset, "Landfills_HIFLD","landfill", OutputPath, GUI_Tool_Location)
    (ports) = getPercentage("ports", "Ports_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (ports_contaminated) = getPercentage("ports", "Ports_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "1 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Ports_HIFLD","port", OutputPath, GUI_Tool_Location)
    (power_plants) = getPercentage("plants", "Power_Plants_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (power_plants_contaminated) = getPercentage("plants", "Power_Plants_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.5 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Power_Plants_HIFLD", "power_plant", OutputPath, GUI_Tool_Location)
    (wastewater) = getPercentage("wastewater", "Wastewater_Treatment_Plants_HIFLD", Infrastructure_Dataset,
                                 ScenarioDataset, "0.5 Mile", OutputPath)
    (wastewater_contaminated) = getPercentage("wastewater", "Wastewater_Treatment_Plants_HIFLD", Infrastructure_Dataset,
                                 Contaminated_Dataset, "0.5 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Wastewater_Treatment_Plants_HIFLD", "wastewater", OutputPath, GUI_Tool_Location)
    (hospitals) = getPercentage("hospitals", "Hospital_Locations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (hospitals_contaminated) = getPercentage("hospitals", "Hospital_Locations_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "1 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Hospital_Locations_HIFLD", "hospital", OutputPath, GUI_Tool_Location)
    (gov) = getPercentage("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile",
                          OutputPath)
    (gov_contaminated) = getPercentage("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.5 Mile",
                          OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Major_State_Government_Buildings_HIFLD", "government", OutputPath, GUI_Tool_Location)
    (comm) = getPercentage("cell", "Cellular_Towers_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (comm_contaminated) = getPercentage("cell", "Cellular_Towers_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "1 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Cellular_Towers_HIFLD", "cell", OutputPath, GUI_Tool_Location)
    (broadcast) = getPercentage("broad", "Land_Mobile_Broadcast_Tower_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    (broadcast_contaminated) = getPercentage("broad", "Land_Mobile_Broadcast_Tower_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "1 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Land_Mobile_Broadcast_Tower_HIFLD", "broadcast", OutputPath, GUI_Tool_Location)
    comm = (comm + broadcast)/2
    (roads) = getPercentage("roads", "USA_Roads", Infrastructure_Dataset, ScenarioDataset, "0.25 Mile", OutputPath)
    (roads_contaminated) = getPercentage("roads", "USA_Roads", Infrastructure_Dataset, Contaminated_Dataset, "0.25 Mile", OutputPath, True)
    #getAffectedInfrastructures(Contaminated_Dataset, "USA_Roads", "roads", OutputPath)
    (fire) = getPercentage("fire", "Fire_Stations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (fire_contaminated) = getPercentage("fire", "Fire_Stations_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.5 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Fire_Stations_HIFLD", "fire_station", OutputPath, GUI_Tool_Location)
    (ems) = getPercentage("ems", "Emergency_Medical_Center_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    (ems_contaminated) = getPercentage("ems", "Emergency_Medical_Center_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.5 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Emergency_Medical_Center_HIFLD", "eMS", OutputPath, GUI_Tool_Location, GUI_Tool_Location)

    #farm = round(createFarmland("USA_Soils_Farmland_Class", ScenarioDataset, Infrastructure_Dataset, OutputPath),2)
    #farm_contaminated = round(100-round(createFarmland("USA_Soils_Farmland_Class", Contaminated_Dataset, Infrastructure_Dataset, OutputPath),2),2)
    farm = 100
    (farm) = getPercentage("farms", "USA_Farms", Infrastructure_Dataset, ScenarioDataset, "100 Mile", OutputPath)
    (farm_contaminated) = getPercentage("farms", "USA_Farms", Infrastructure_Dataset, Contaminated_Dataset, "100 Mile", OutputPath, True)
    getAffectedInfrastructures(Contaminated_Dataset, "Landfills_HIFLD","landfill", OutputPath, GUI_Tool_Location)        
    # Process: Affected Infrastructure Statistics (Summary Statistics)

    # Process: Calculate Agriculture Percent (Calculate Value) 
    agriculture_percent = round(farm, 2)
    agriculture_percent_contaminated = round(farm_contaminated, 2)

    # Process: Calculate WaterPercent (Calculate Value) 
    water_percent = round(wastewater, 2)
    water_percent_contaminated = round(wastewater_contaminated,2)

    # Process: Calculate Energy Percent (Calculate Value)
    energy_percent = round(power_plants, 2)
    energy_percent_contaminated = round(power_plants_contaminated, 2)

    # Process: Calculate Transport Percent (Calculate Value) 
    transport_percent = round((roads + ports)/2, 2)
    transport_percent_contaminated = round((roads_contaminated + ports_contaminated)/2, 2)

    # Process: Calculate Comm Percent (Calculate Value)
    comm_percent = round(comm, 2)
    comm_percent_contaminated = round(comm_contaminated,2)

    # Process: Calculate Government Percent (Calculate Value) 
    government_percent = round(gov, 2)
    government_percent_contaminated = round(100-round(gov_contaminated, 2), 2)

    # Process: Calculate Emergency Percent (Calculate Value) 
    emergency_percent = round((fire + ems)/2, 2)
    emergency_percent_contaminated = round((fire_contaminated + ems_contaminated)/2,2)

    # Process: Calculate Healthcare Percent (Calculate Value)
    healthcare_percent = round(hospitals,2)
    healthcare_percent_contaminated = round(hospitals_contaminated,2)

    arcpy.AddMessage("Water Efficiency: " + str(round(water_percent, 2)) + "%")
    arcpy.AddMessage("Energy Efficiency: " + str(round(energy_percent, 2)) + "%")
    arcpy.AddMessage("Transport Efficiency: " + str(round(transport_percent, 2)) + "%")
    arcpy.AddMessage("Communications Efficiency: " + str(round(comm_percent, 2)) + "%")
    arcpy.AddMessage("Government Efficiency: " + str(round(government_percent, 2)) + "%")
    arcpy.AddMessage("Agriculture Efficiency: " + str(round(agriculture_percent, 2)) + "%")
    arcpy.AddMessage("Emergency Efficiency: " + str(round(emergency_percent, 2)) + "%")
    arcpy.AddMessage("Waste Efficiency: " + str(round(waste, 2)) + "%")
    #arcpy.AddMessage("Healthcare Efficiency: " + str(round(healthcare_percent, 2)) + "%")
    arcpy.AddMessage("Healthcare Efficiency: " + str(round(hospitals, 2)) + "%")
    
    fileLoc = os.path.join(GUI_Tool_Location, "infrastructures_inputs.txt")
    json_data = open(str(fileLoc))
    data = json.load(json_data)
    path_parent = os.path.dirname(arcpy.env.workspace)
    copyfile(fileLoc, path_parent + "\\" + "infrastructures_inputs.txt")
    defaultPath = GUI_Tool_Location + "\\default.csv"
    copyfile(defaultPath, path_parent + "\\" + "default.csv")
    inputsFile = GUI_Tool_Location + "\\report_inputs.txt"
    copyfile(inputsFile, path_parent + "\\" + "report_inputs.txt")

    SensitivityFolder = GUI_Tool_Location + "\\Sensitivity Images"
    if os.path.isdir(path_parent + "\\Sensitivity Images"):
        shutil.rmtree(path_parent + "\\Sensitivity Images")

    destination = shutil.copytree(SensitivityFolder, path_parent + "\\Sensitivity Images")

    sensitivityExe = GUI_Tool_Location + "\\sensitivity_GUI.exe"
    copyfile(sensitivityExe, path_parent + "\\sensitivity_GUI.exe")
    
    n0new = [water_percent, energy_percent, transport_percent, comm_percent, government_percent,
             agriculture_percent, emergency_percent, waste, healthcare_percent]
    #arcpy.AddMessage(n0new)
    contamnew = [water_percent_contaminated, energy_percent_contaminated, transport_percent_contaminated, comm_contaminated, gov_contaminated,
             agriculture_percent_contaminated, emergency_percent_contaminated, waste_contaminated, healthcare_percent_contaminated]
    #arcpy.AddMessage(contamnew)
    data["n0"] = n0new
    data["contamination"] = contamnew
    inputsPath = os.path.join(GUI_Tool_Location, "infrastructures_inputs.txt")
    arcpy.AddMessage(GUI_Tool_Location)
    with open(inputsPath, "w") as outfile:
        json.dump(data, outfile)
    with open(path_parent + "\\" + "infrastructures_inputs.txt", "w") as outfile:
        json.dump(data, outfile)
    fillOut(GUI_Tool_Location + "\\DefineScenario.xlsx", Contaminated_Dataset, Infrastructure_Dataset, OutputPath, GUI_Tool_Location)
    newPath = wrapArg(GUI_Tool_Location +  "\\infrastructures_gui.exe")
    os.chdir(GUI_Tool_Location)
    command_prompt = "cmd /k " + newPath
    os.system(command_prompt)
    
def createLayerFromAPI(url, name, OutputPath):
    outputLocation= OutputPath + "\\"+name
    response = urllib.request.urlopen(url)
    path_parent = os.path.dirname(arcpy.env.workspace)
    #data = json.loads(response.read())
    data = requests.get(url).json()
    path = outputLocation + ".json"
    with open(path, 'w+') as f:
        json.dump(data, f, indent=2)
    outputLayer = outputLocation + ".shp"
    arcpy.JSONToFeatures_conversion(path, outputLayer, "POINT")
    path_to_layer= OutputPath + "\\"+name + "_layer.lyr"
    arcpy.MakeFeatureLayer_management(outputLayer,name)
    newlayer = arcpy.SaveToLayerFile_management(name, path_to_layer, "ABSOLUTE")
    p = arcpy.mp.ArcGISProject("CURRENT")
    m = p.activeMap
    lyr = m.addDataFromPath(newlayer)
    #getLayerStyle(name, lyr)
    #lyr.visible = True

def getArea(name, shapefile, Infrastructure_Dataset, ScenarioDataset, buffer, OutputPath, farmland = False):
        arcpy.env.overwriteOutput = True
        path_parent = os.path.dirname(arcpy.env.workspace)
        sector_in_area = arcpy.env.workspace + "\\possible_"+name
        arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [shapefile, ""]],
                             out_feature_class=sector_in_area, join_attributes="ALL", cluster_tolerance="",
                                 output_type="INPUT")
        buffered_in_area =arcpy.env.workspace + "\\buffered_"+name
        arcpy.Buffer_analysis(sector_in_area, buffered_in_area, buffer, "FULL", "ROUND")
        dissolved_sector = arcpy.env.workspace + "\\dissolved_"+name
        arcpy.Dissolve_management(buffered_in_area, dissolved_sector)
        affected_sector = OutputPath + "\\affected_"+name
        affected_buffered_sector = OutputPath + "\\affected_buffered_"+name
        arcpy.Intersect_analysis(in_features=[dissolved_sector,ScenarioDataset],
                                 out_feature_class=affected_sector,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp",
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        affected_stats = arcpy.env.workspace + "\\affected_stats_"+name
        arcpy.analysis.Statistics(in_table=affected_sector+".shp", out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        cursor = arcpy.da.SearchCursor(affected_stats, "SUM_AREA_GEO")
        results = 0
        count = 0
        for row in cursor:
            results = row[0]
            count +=1
        area_contaminated = results
        #arcpy.AddMessage(name+ " " + str(area_contaminated))
        return area_contaminated

def fillOut(excelDoc, ScenarioDataset, Infrastructure_Dataset, OutputPath, GUI_Tool_Location):
    spreadsheet = pd.read_excel(excelDoc, sheet_name="Extent of Contamination")
    copy = OutputPath + "\\copied_features.shp"
    arcpy.CopyFeatures_management(ScenarioDataset, copy)
    arcpy.management.AddGeometryAttributes(Input_Features=copy,Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
    cursor = arcpy.da.SearchCursor(copy, "AREA_GEO")
    area  = 0
    for row in cursor:
        area += row[0]
    spreadsheet.loc[spreadsheet.Description == "The total outdoor surface area contaminated", "Parameter 1"] = area
    #Government
    government = getArea("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.5 Mile", OutputPath)
    #Industrial Datasets
    industrial = getArea("plants", "Power_Plants_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.5 Mile", OutputPath)
    industrial2 = getArea("industrial", "Industrial_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.5 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Industrial_HIFLD","industrial", OutputPath, GUI_Tool_Location, True)    
    #Schools

    public_schools = getArea("public_schools", "Public_Schools_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.5 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Public_Schools_HIFLD","public_schools", OutputPath, GUI_Tool_Location, True) 
    private_schools = getArea("private_schools", "Private_Schools_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.5 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Private_Schools_HIFLD","private_schools", OutputPath, GUI_Tool_Location, True) 
    colleges = getArea("colleges", "Colleges_HIFLD", Infrastructure_Dataset, ScenarioDataset, "1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Colleges_HIFLD","colleges", OutputPath, GUI_Tool_Location, True)
    #Commercial

    commerical = getArea("corporate", "Corporate_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Corporate_HIFLD","corporate", OutputPath, GUI_Tool_Location, True)     
    #Water
    #Add water dataset?

    #Religious

    worship = getArea("worship", "Worship_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.25 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Worship_HIFLD","worship", OutputPath, GUI_Tool_Location, True)

    agri = getArea("agri", "USA_Farms", Infrastructure_Dataset,
                                       ScenarioDataset, "100 Mile", OutputPath)
    #roofs = sum(areas)
    #building_exteriors = sum(areas)
    school_areas = public_schools + private_schools + colleges
    industrial_area = industrial + industrial2
    government_area = government
    dicts = {
        "validPhases":[["Indoor"], ["Indoor"], ["Indoor"], ["Indoor"], ["Indoor"], ["Indoor"]],
        "category":["Industrial","Commercial","Religious","Education", "Government","Agricultural"],
        "name": ["Indoor Contamination Area","Indoor Contamination Area","Indoor Contamination Area",
                 "Indoor Contamination Area","Indoor Contamination Area","Indoor Contamination Area"],
        "description":["The area of contaminated surface area which is industrial",
                       "The area of contaminated surface area which is commercial",
                       "The area of contaminated surface area which is religious",
                       "The area of contaminated surface area which is educational",
                       "The area of contaminated surface area which is government",
                       "The area of contaminated surface area which is agricultural"],
        "units":["m^2", "m^2", "m^2", "m^2", "m^2", "m^2"],
        "value":[industrial_area, commerical, worship, school_areas, government_area, agri]
        }
    df2 = pd.DataFrame(dicts)
    new_loc = GUI_Tool_Location + "\\NewDefineScenario.json"
    #arcpy.AddMessage(df2)
    spreadsheet.reset_index(inplace=True)
    df2.to_json(new_loc, orient="table")
    #fixed_json = json.loads(new_loc)
    #new_json = fixed_json["data"]
    #arcpy.AddMessage(new_json)
    #new_json.to_json(new_loc, orient="table")
            
if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=arcpy.env.workspace, workspace=arcpy.env.workspace):
        #arcpy.AddMessage("Entering script")
        argsFixed = argv[1:]
        for a in range(len(argsFixed)):
            if a > 1:
                argsFixed[a] = wrapArg(argsFixed[a])
                        
        #EfficiencyCalculator(*(argsFixed))
        #arcpy.AddMessage("Entering script")
        EfficiencyCalculator(*argv[1:])


