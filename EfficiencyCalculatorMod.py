# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2020.1 Mile-04 12:12:30
"""
import arcpy
from sys import argv
import os
import pandas as pd
import json
import arcpy, sys, os, arcgis, requests 
import urllib
import urllib.request
import subprocess
from shutil import copyfile
from arcgis.geometry import Geometry
from arcgis.geocoding import reverse_geocode
import shutil


def wrapArg(s):
    if len(str(s).split(' ')) <= 1:
        return s
    return (f"\"{s}\"")

def getAgri(den, num):
	if float(num) > 0 and float(den) > 0:
		return (1 - float(num)/float(den))*100
	else:
		return 0
def getWater(den, num):
	if float(num) > 0 and float(den) > 0:
		return (1 - float(num)/float(den))*100
	else:
		return 0
def getEnergy(den, num, den1, num1):
	if float(num) > 0 and float(den) > 0:
		val = (1 - float(num)/float(den))*100
		val1 = (1 - float(num1)/float(den1))*100
		return (val + val1)/2
	else:
		return 0

def getGov(den, num, den1, num1, den2, num2):
	if float(num) > 0 and float(den) > 0:
		val = (1 - float(num)/float(den))*100
		val1 = (1 - float(num1)/float(den1))*100
		val2 = (1 - float(num2)/float(den2))*100
		return (val + val1 + val2)/3
	else:
		return 0

def getInfName(infrastructures):
    if "Wastewater" in infrastructures:
        return "CWP_NAME"
    if "Roads" in infrastructures:
        return "Information"
    if "Land_Mobile" in infrastructures or "Cellular" in infrastructures:
        return "LICENSEE"
    if "Ports" in infrastructures:
        return "nav_unit_n"
    if "Industrial" in infrastructures:
        return "SITE_NAME"
##    if "Hospitals" in infrastructures:
##        return "NAME_1"
##    if "Medical" in infrastructures:
##        return "NAME_1"
    # Landfills, Government, Power plants, Urgent Care, Fire Stations, Hospitals, EMC
    return "NAME"

def getLatName(infrastructures):
    if "Ports" in infrastructures:
        return "latitude11"
    if "Roads" in infrastructures:
        return "Information"
    if "Land_Mobile" in infrastructures:
        return "LAT_DMS"
    if "Cellular" in infrastructures:
        return "LatDeg"
    if "Wastewater" in infrastructures:
        return "CWP_STREET"
    if "Fire" in infrastructures:
        return "ADDRESS"
    if "Urgent_Care" in infrastructures:
        return "X"
    # Landfills, Government, Power plants, Urgent Care, Fire Stations, Hospitals, EMC
    return "LATITUDE"

def getLongName(infrastructures):
    if "Ports" in infrastructures:
        return "longitude1"
    if "Roads" in infrastructures:
        return "Information"
    if "Land_Mobile" in infrastructures:
        return "LON_DMS"
    if "Cellular" in infrastructures:
        return "LonDeg"
    if "Wastewater" in infrastructures:
        return "CWP_CITY"
    if "Fire" in infrastructures:
        return "CITY"
    if "Urgent_Care" in infrastructures:
        return "Y"
    # Landfills, Government, Power plants, Urgent Care, Fire Stations, Hospitals, EMC
    return "LONGITUDE"

def getColumns(infrastructures):
    if "Wastewater" in infrastructures or "Fire" in infrastructures:
        return ("Address", "City")
    return ("Latitude", "Longitude")
    

def getAffectedInfrastructures(contaminated_shapefile, infrastructures, iname, OutputPath, GUIPath, addition, other = False):
    #arcpy.AddMessage("Made it to the affected")
    path_parent = os.path.dirname(arcpy.env.workspace)
    outPolygons = OutputPath + "\\contaminated_" + iname +".shp"
    arcpy.Intersect_analysis(in_features=[infrastructures, contaminated_shapefile],
                                 out_feature_class=outPolygons)
    infrastructureName = getInfName(infrastructures)
    latname = getLatName(infrastructures)
    longname = getLongName(infrastructures)
    (name1, name2) = getColumns(infrastructures)
    newPath = GUIPath + "//"  + addition + "//"  + iname + "_contaminated.csv"
    GISPath = path_parent +"//"  + addition + "//"  + iname + "_contaminated.csv"
    if other:
        results = pd.DataFrame({"Building Name":[]})
        if arcpy.management.GetCount(outPolygons)[0] == "0":
            results.to_csv(GISPath)
            results.to_csv(newPath)
            return
        fdList = [infrastructureName]
        for row in arcpy.da.SearchCursor(outPolygons, [infrastructureName]):
            #arcpy.AddMessage(row)
            results = results.append({"Building Name": row[0]}, ignore_index=True)
        #rcpy.AddMessage(results)
        results.to_csv(GISPath)
        results.to_csv(newPath)
    else: 
        results = pd.DataFrame({"Building Name":[], name1:[], name2:[]})
        if arcpy.management.GetCount(outPolygons)[0] == "0":
            #newPath = GUIPath + "//Contaminated//" + iname + "_contaminated.csv"
            results.to_csv(newPath)
            results.to_csv(GISPath)
        fdList = [infrastructureName, latname, longname]
        for row in arcpy.da.SearchCursor(outPolygons, [infrastructureName, latname, longname]):
            #arcpy.AddMessage(row)
            results = results.append({"Building Name": row[0], name1: row[1], name2: row[2]}, ignore_index=True)
        #rcpy.AddMessage(results)
        results.to_csv(GISPath)
        results.to_csv(newPath)

def createFarmland(farmland, incident_shapefile, area_of_interest, OutputPath):
        import arcpy
        count = 0
        # Fetch each feature from the cursor and examine the extent properties

        # Process: Add Geometry Attributes (Add Geometry Attributes) (management)
        area_shapefile_copy = arcpy.env.workspace + "\\farm_copy"
        arcpy.CopyFeatures_management(area_of_interest, area_shapefile_copy)
        arcpy.management.AddGeometryAttributes(Input_Features=area_shapefile_copy, Geometry_Properties=["EXTENT"],
                                Length_Unit="", Area_Unit="",
                                Coordinate_System="PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',\
        SPHEROID['WGS_1984',6378137.0,298.257223563]],\
        PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],\
        PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]]")
        for row in arcpy.da.SearchCursor(area_shapefile_copy, ['EXT_MIN_X', 'EXT_MAX_X', 'EXT_MIN_Y', 'EXT_MAX_Y']):
                rectangle = '{} {} {} {}'.format(row[0], row[2], row[1], row[3])
                clipped_output = arcpy.env.workspace + "\\Clipped_Farmland"
                clipped_test = OutputPath + "\\Clipped_Farm"
                clipped = arcpy.Clip_management(farmland,rectangle,clipped_output)
                #arcpy.Clip_management(farmland,rectangle,clipped_test)
        # Set local variables
        inRaster = clipped_output
        outPolygons = arcpy.env.workspace + "\\clipped_farm_polygon"
        field = "Simplified Class"
        
        # Execute RasterToPolygon
        arcpy.RasterToPolygon_conversion(inRaster, outPolygons, "NO_SIMPLIFY", field)
        affected_sector = OutputPath + "\\affected_farms"
        arcpy.Intersect_analysis(in_features=[outPolygons,incident_shapefile],
                                 out_feature_class=affected_sector+".shp",join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        sector_in_area = OutputPath + "\\farms"
        arcpy.Intersect_analysis(in_features=[outPolygons,area_of_interest],
                                 out_feature_class=sector_in_area,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        area1 = 0
        count= 0
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp", Geometry_Properties=["AREA_GEODESIC"],
                                               Area_Unit="Square meters")
        arcpy.management.AddGeometryAttributes(Input_Features=sector_in_area+".shp", Geometry_Properties=["AREA_GEODESIC"],
                                               Area_Unit="Square meters")
        for row in arcpy.da.SearchCursor(affected_sector+".shp", ["AREA_GEO", "gridcode"]):
                if int(row[1])<3:
                        count += 1
                        area1 += float(row[0])
        area2 = 0
        for row in arcpy.da.SearchCursor(sector_in_area+".shp", ["AREA_GEO", "gridcode"]):
                if int(row[1])<3:
                        area2 += float(row[0])
        if(area2 == 0):
                area2 = 100
        return ((1-area1/area2)*100) 
        
        
def getHIFLDlayers(OutputPath):
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/6ac5e325468c4cb9b905f1728d6fbf0f_0.geojson",
                           "Hospital_Locations_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/155761d340764921ab7fb2e88257bd97_0.geojson",
                           "Landfills_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/4b9bac25263047c19e617d7bd7b30701_0.geojson",
                           "Wastewater_Treatment_Plants_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/ee0263bd105d41599be22d46107341c3_0.geojson",
                           "Power_Plants_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/1b6e231f88814aceb30fb6ad3ff86014_0.geojson",
                           "Major_State_Government_Buildings_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/0835ba2ed38f494196c14af8407454fb_0.geojson",
                           "Cellular_Towers_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/ec4d868ea1354fc9a85fe35e7db0cffd_0.geojson",
                           "Land_Mobile_Broadcast_Tower_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/0ccaf0c53b794eb8ac3d3de6afdb3286_0.geojson",
                           "Fire_Stations_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/335ccc7c0684453fad69d8a64bc89192_0.geojson",
                           "Urgent_Care_Facilities_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/362c9480f12e4587b6a502f9ceedccde_0.geojson",
                           "Emergency_Medical_Center_HIFLD", OutputPath)
        createLayerFromAPI(r"https://opendata.arcgis.com/datasets/02013eaa0e1e4cc59658fe9e1c7ac703_0.geojson",
                           "Ports_HIFLD", OutputPath)
        
        
def getPercentage(name, shapefile, Infrastructure_Dataset, ScenarioDataset, buffer, OutputPath, contaminated = False, farmland = False):
        arcpy.env.overwriteOutput = True
        path_parent = os.path.dirname(arcpy.env.workspace)
        sector_in_area = arcpy.env.workspace + "\\possible_"+name
        arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [shapefile, ""]],
                             out_feature_class=sector_in_area, join_attributes="ALL", cluster_tolerance="",
                                 output_type="INPUT")
        buffered_in_area =arcpy.env.workspace + "\\buffered_"+name
        arcpy.Buffer_analysis(sector_in_area, buffered_in_area, buffer, "FULL", "ROUND")
        dissolved_sector = arcpy.env.workspace + "\\dissolved_"+name
        arcpy.Dissolve_management(buffered_in_area, dissolved_sector)
        affected_sector = OutputPath + "\\affected_"+name
        affected_buffered_sector = OutputPath + "\\affected_buffered_"+name
        arcpy.Intersect_analysis(in_features=[dissolved_sector,ScenarioDataset],
                                 out_feature_class=affected_sector,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")

        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp",
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        arcpy.management.AddGeometryAttributes(Input_Features=dissolved_sector,
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")

        affected_stats = arcpy.env.workspace + "\\affected_stats_"+name
        dissolved_stats = arcpy.env.workspace + "\\dissolved_stats_"+name

        arcpy.analysis.Statistics(in_table=affected_sector+".shp", out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        arcpy.analysis.Statistics(in_table=dissolved_sector, out_table=dissolved_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        
        cursor = arcpy.da.SearchCursor(affected_stats, "SUM_AREA_GEO")
        results = 0
        count = 0
        for row in cursor:
            results += float(row[0])
            count +=1
        cursor2 = arcpy.da.SearchCursor(dissolved_stats, "SUM_AREA_GEO")
        results2 = 100
        for row in cursor2:
            results2 += float(row[0])
        area_contaminated = results
        arcpy.AddMessage(name+ " " + str(area_contaminated))
        if contaminated:
            return ((results/results2)*100)
        return ((1-results/results2)*100)

def EfficiencyCalculator(ScenarioDataset="dissolved2", Contaminated_Dataset = "contaminated", Infrastructure_Dataset="HoustonBlocks",
                         BPPMin = 0, BPPMax = 1, Event_Type = False):  # EfficiencyCalculator
    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = True
    desc = arcpy.Describe("SIRM Tool.tbx")
    arcpy.AddMessage(desc)
    GUI_Tool_Location = os.getcwd()
    OutputPath = GUI_Tool_Location + "\\temp_output"
    arcpy.AddMessage("Path:      " + GUI_Tool_Location)
    path_parent = os.path.dirname(arcpy.env.workspace)
    # Process: Infrastructure Counts (Summary Statistics)
    filepath = os.getcwd()
    # Process: Intersect (Intersect) 
    Affected_Area = arcpy.env.workspace + "\\intersect"
    arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [ScenarioDataset, ""]],
                             out_feature_class=Affected_Area, join_attributes="ALL", cluster_tolerance="", output_type="INPUT")

    Destroyed = arcpy.GetParameter(5)
    arcpy.AddMessage(Destroyed)
    #HIFLD counts
    #aprx = arcpy.mp.ArcGISProject('CURRENT')
    #Layout = aprx.listMaps()[0]
    #arcpy.AddMessage(Layout)
    #Layout.exportToPDF(GUI_Tool_Location + "\\Mapping.pdf")
    #aprx = arcpy.mp.ArcGISProject("CURRENT")
    #m = aprx.listMaps()[0]
    #layerSet = m.listLayers()[0]
    #layoutwork = aprx.listLayouts()[0]
    #layoutwork.exportToPDF(GUI_Tool_Location + "//Mapping.pdf", resolution = 300)
    aprx = arcpy.mp.ArcGISProject("CURRENT")
    mapping = aprx.listMaps()[0]
    mapping_path = GUI_Tool_Location + r"/Results/Mapping.png"
    arcpy.AddMessage(mapping_path)
    mapping.defaultView.exportToPNG(mapping_path, width = 1400, height = 1000)
    
    if os.path.isdir(path_parent + "//Contaminated"):
        shutil.rmtree(path_parent + "//Contaminated")
    if os.path.isdir(GUI_Tool_Location + "//Contaminated"):
        shutil.rmtree(GUI_Tool_Location + "//Contaminated")
    if os.path.isdir(path_parent + "//Overall"):
        shutil.rmtree(path_parent + "//Overall")
    if os.path.isdir(GUI_Tool_Location + "//Overall"):
        shutil.rmtree(GUI_Tool_Location + "//Overall")
    if os.path.isdir(path_parent + "//Affected"):
        shutil.rmtree(path_parent + "//Affected")
    if os.path.isdir(GUI_Tool_Location + "//Affected"):
        shutil.rmtree(GUI_Tool_Location + "//Affected")
    os.mkdir(path_parent + "//Contaminated")
    os.mkdir(GUI_Tool_Location + "//Contaminated")
    os.mkdir(path_parent + "//Affected")
    os.mkdir(GUI_Tool_Location + "//Affected")
    os.mkdir(path_parent + "//Overall")
    os.mkdir(GUI_Tool_Location + "//Overall")
    if arcpy.Exists(Contaminated_Dataset):
        multiplier = 0
        if Destroyed:
            multiplier = 1

        (waste_contaminated) = round(getPercentage("landfills", "Landfills_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.1 Mile", OutputPath, True),2)
        getAffectedInfrastructures(Contaminated_Dataset, "Landfills_HIFLD","landfill", OutputPath, GUI_Tool_Location, "Contaminated")
        (ports_contaminated) = getPercentage("ports", "Ports_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.5 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Ports_HIFLD","ports", OutputPath, GUI_Tool_Location, "Contaminated")
        (power_plants_contaminated) = getPercentage("plants", "Power_Plants_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.1 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Power_Plants_HIFLD", "power_plant", OutputPath, GUI_Tool_Location, "Contaminated")
        (wastewater_contaminated) = getPercentage("wastewater", "Wastewater_Treatment_Plants_HIFLD", Infrastructure_Dataset,
                                 Contaminated_Dataset, "0.1 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Wastewater_Treatment_Plants_HIFLD", "wastewater", OutputPath, GUI_Tool_Location, "Contaminated")
        (hospitals_contaminated) = getPercentage("hospitals", "Hospital_Locations_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.1 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Hospital_Locations_HIFLD", "hospitals", OutputPath, GUI_Tool_Location, "Contaminated")
        (gov_contaminated) = getPercentage("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.1 Mile",
                          OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Major_State_Government_Buildings_HIFLD", "government", OutputPath, GUI_Tool_Location, "Contaminated")
        (comm_contaminated) = getPercentage("cell", "Cellular_Towers_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.05 Mile", OutputPath, True)
        comm_contaminated = comm_contaminated*multiplier
        getAffectedInfrastructures(Contaminated_Dataset, "Cellular_Towers_HIFLD", "cell_towers", OutputPath, GUI_Tool_Location, "Contaminated")
        (broadcast_contaminated) = getPercentage("broad", "Land_Mobile_Broadcast_Tower_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.05 Mile", OutputPath, True)
        broadcast_contaminated = broadcast_contaminated*multiplier
        getAffectedInfrastructures(Contaminated_Dataset, "Land_Mobile_Broadcast_Tower_HIFLD", "broadcast_towers", OutputPath, GUI_Tool_Location, "Contaminated")
        (ems_contaminated) = getPercentage("ems", "Emergency_Medical_Center_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.1 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Emergency_Medical_Center_HIFLD", "emergency_(EMS)", OutputPath, GUI_Tool_Location, "Contaminated")
        (roads_contaminated) = getPercentage("roads", "USA_Roads", Infrastructure_Dataset, Contaminated_Dataset, "0.1 Mile", OutputPath, True)
        (fire_contaminated) = getPercentage("fire", "Fire_Stations_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.05 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Fire_Stations_HIFLD", "fire_stations", OutputPath, GUI_Tool_Location, "Contaminated")
        (farm_contaminated) = getPercentage("farms", "USA_Farms", Infrastructure_Dataset, Contaminated_Dataset, "10 Mile", OutputPath, True)
        getAffectedInfrastructures(Contaminated_Dataset, "Industrial_HIFLD","industrial", OutputPath, GUI_Tool_Location, "Contaminated", True)
        getAffectedInfrastructures(Contaminated_Dataset, "Public_Schools_HIFLD","public_schools", OutputPath, GUI_Tool_Location, "Contaminated", True)
        getAffectedInfrastructures(Contaminated_Dataset, "Private_Schools_HIFLD","private_schools", OutputPath, GUI_Tool_Location, "Contaminated", True)
        getAffectedInfrastructures(Contaminated_Dataset, "Colleges_HIFLD","colleges", OutputPath, GUI_Tool_Location, "Contaminated", True)
        getAffectedInfrastructures(Contaminated_Dataset, "Corporate_HIFLD","corporate", OutputPath, GUI_Tool_Location, "Contaminated", True)
        getAffectedInfrastructures(Contaminated_Dataset, "Worship_HIFLD","worship", OutputPath, GUI_Tool_Location, "Contaminated", True)
        (electricgrid_contaminated) = getPercentage("grid", "Transmission_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.01 Mile", OutputPath, True)
        electricgrid_contaminated= electricgrid_contaminated*multiplier
        (substation_contaminated) = getPercentage("substation", "Electric_Substation_HIFLD", Infrastructure_Dataset, Contaminated_Dataset, "0.01 Mile", OutputPath, True)
        substation_contaminated = substation_contaminated*multiplier
        arcpy.AddMessage("Grid: " + str(round(electricgrid_contaminated, 2)) + "%")
        
    (waste) = round(getPercentage("landfills", "Landfills_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath),2)
    getAffectedInfrastructures(ScenarioDataset, "Landfills_HIFLD","landfill", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Landfills_HIFLD","landfill", OutputPath, GUI_Tool_Location, "Overall")
    
    (ports) = getPercentage("ports", "Ports_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.5 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Ports_HIFLD","ports", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Ports_HIFLD","ports", OutputPath, GUI_Tool_Location, "Overall")  
    
    (power_plants) = getPercentage("plants", "Power_Plants_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Power_Plants_HIFLD","plants", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Power_Plants_HIFLD","plants", OutputPath, GUI_Tool_Location, "Overall")
    
    
    (wastewater) = getPercentage("wastewater", "Wastewater_Treatment_Plants_HIFLD", Infrastructure_Dataset,ScenarioDataset, "0.1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Wastewater_Treatment_Plants_HIFLD","wastewater", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Wastewater_Treatment_Plants_HIFLD","wastewater", OutputPath, GUI_Tool_Location, "Overall")
                                 
    (hospitals) = getPercentage("hospitals", "Hospital_Locations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Hospital_Locations_HIFLD","hospitals", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Hospital_Locations_HIFLD","hospitals", OutputPath, GUI_Tool_Location, "Overall")

    (gov) = getPercentage("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile",
                          OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Major_State_Government_Buildings_HIFLD","government", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Major_State_Government_Buildings_HIFLD","government", OutputPath, GUI_Tool_Location, "Overall")


    (comm) = getPercentage("cell", "Cellular_Towers_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.05 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Cellular_Towers_HIFLD","cell_towers", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Cellular_Towers_HIFLD","cell_towers", OutputPath, GUI_Tool_Location, "Overall")

    (broadcast) = getPercentage("broad", "Land_Mobile_Broadcast_Tower_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.05 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Land_Mobile_Broadcast_Tower_HIFLD","broadcast_towers", OutputPath, GUI_Tool_Location, "Affected")
    getAffectedInfrastructures(Infrastructure_Dataset, "Land_Mobile_Broadcast_Tower_HIFLD","broadcast_towers", OutputPath, GUI_Tool_Location, "Overall")

    comm = (comm + broadcast)/2
    (roads) = getPercentage("roads", "USA_Roads", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath)
    (electricgrid) = getPercentage("grid", "Transmission_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.01 Mile", OutputPath)
    arcpy.AddMessage("Grid: " + str(round(electricgrid, 2)) + "%")

    #getAffectedInfrastructures(Contaminated_Dataset, "USA_Roads", "roads", OutputPath)
    (fire) = getPercentage("fire", "Fire_Stations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Fire_Stations_HIFLD","fire_stations", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Fire_Stations_HIFLD","fire_stations", OutputPath, GUI_Tool_Location, "Overall", True)

    (ems) = getPercentage("ems", "Emergency_Medical_Center_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath)
    getAffectedInfrastructures(ScenarioDataset, "Emergency_Medical_Center_HIFLD","emergency_(EMS)", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Emergency_Medical_Center_HIFLD","emergency_(EMS)", OutputPath, GUI_Tool_Location, "Overall", True)

    #additional infrastructures
    
    getAffectedInfrastructures(ScenarioDataset, "Industrial_HIFLD","industrial", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Industrial_HIFLD","industrial", OutputPath, GUI_Tool_Location, "Overall", True)

    getAffectedInfrastructures(ScenarioDataset, "Electric_Substation_HIFLD","substation", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Electric_Substation_HIFLD","substation", OutputPath, GUI_Tool_Location, "Overall", True)
    
    getAffectedInfrastructures(ScenarioDataset, "Public_Schools_HIFLD","public_schools", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Public_Schools_HIFLD","public_schools", OutputPath, GUI_Tool_Location, "Overall", True)

    
    getAffectedInfrastructures(ScenarioDataset, "Private_Schools_HIFLD","private_schools", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Private_Schools_HIFLD","private_schools", OutputPath, GUI_Tool_Location, "Overall", True)

    
    getAffectedInfrastructures(ScenarioDataset, "Colleges_HIFLD","colleges", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Colleges_HIFLD","colleges", OutputPath, GUI_Tool_Location, "Overall", True)

    
    getAffectedInfrastructures(ScenarioDataset, "Corporate_HIFLD","corporate", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Corporate_HIFLD","corporate", OutputPath, GUI_Tool_Location, "Overall", True)


    getAffectedInfrastructures(ScenarioDataset, "Worship_HIFLD","worship", OutputPath, GUI_Tool_Location, "Affected", True)
    getAffectedInfrastructures(Infrastructure_Dataset, "Worship_HIFLD","worship", OutputPath, GUI_Tool_Location, "Overall", True)  


    #farm = round(createFarmland("USA_Soils_Farmland_Class", ScenarioDataset, Infrastructure_Dataset, OutputPath),2)
    #farm_contaminated = round(100-round(createFarmland("USA_Soils_Farmland_Class", Contaminated_Dataset, Infrastructure_Dataset, OutputPath),2),2)
    farm = 100
    (farm) = getPercentage("farms", "USA_Farms", Infrastructure_Dataset, ScenarioDataset, "100 Mile", OutputPath)
     
    # Process: Affected Infrastructure Statistics (Summary Statistics)

    # Process: Calculate Agriculture Percent (Calculate Value) 
    agriculture_percent = round(farm, 2)
    if arcpy.Exists(Contaminated_Dataset):
        agriculture_percent_contaminated = round(farm_contaminated, 2)

    # Process: Calculate WaterPercent (Calculate Value) 
    water_percent = round(wastewater, 2)
    if arcpy.Exists(Contaminated_Dataset):
        water_percent_contaminated = round(wastewater_contaminated,2)

    # Process: Calculate Energy Percent (Calculate Value)
    energy_percent = round((power_plants+electricgrid)/2, 2)
    if arcpy.Exists(Contaminated_Dataset):
        energy_percent_contaminated = round((power_plants_contaminated+electricgrid_contaminated)/2, 2)

    # Process: Calculate Transport Percent (Calculate Value) 
    transport_percent = round((roads + ports)/2, 2)
    if arcpy.Exists(Contaminated_Dataset):
        transport_percent_contaminated = round((roads_contaminated + ports_contaminated)/2, 2)

    # Process: Calculate Comm Percent (Calculate Value)
    comm_percent = round(comm, 2)
    if arcpy.Exists(Contaminated_Dataset):
        comm_percent_contaminated = round((comm_contaminated + broadcast_contaminated)/2,2)

    # Process: Calculate Government Percent (Calculate Value) 
    government_percent = round(gov, 2)
    if arcpy.Exists(Contaminated_Dataset):
        government_percent_contaminated = round(gov_contaminated, 2)

    # Process: Calculate Emergency Percent (Calculate Value) 
    emergency_percent = round((fire + ems)/2, 2)
    if arcpy.Exists(Contaminated_Dataset):
        emergency_percent_contaminated = round((fire_contaminated + ems_contaminated)/2,2)

    # Process: Calculate Healthcare Percent (Calculate Value)
    healthcare_percent = round(hospitals,2)
    if arcpy.Exists(Contaminated_Dataset):
        healthcare_percent_contaminated = round(hospitals_contaminated,2)

    waste_percent = round(waste,2)
    if arcpy.Exists(Contaminated_Dataset):
        waste_percent_contaminated = round(waste_contaminated,2)

    arcpy.AddMessage("Water Efficiency: " + str(round(water_percent, 2)) + "%")
    arcpy.AddMessage("Energy Efficiency: " + str(round(energy_percent, 2)) + "%")
    arcpy.AddMessage("Transport Efficiency: " + str(round(transport_percent, 2)) + "%")
    arcpy.AddMessage("Communications Efficiency: " + str(round(comm_percent, 2)) + "%")
    arcpy.AddMessage("Government Efficiency: " + str(round(government_percent, 2)) + "%")
    arcpy.AddMessage("Agriculture Efficiency: " + str(round(agriculture_percent, 2)) + "%")
    arcpy.AddMessage("Emergency Efficiency: " + str(round(emergency_percent, 2)) + "%")
    arcpy.AddMessage("Waste Efficiency: " + str(round(waste, 2)) + "%")
    #arcpy.AddMessage("Healthcare Efficiency: " + str(round(healthcare_percent, 2)) + "%")
    arcpy.AddMessage("Healthcare Efficiency: " + str(round(hospitals, 2)) + "%")
    
    fileLoc = os.path.join(GUI_Tool_Location, "infrastructures_inputs.txt")
    json_data = open(str(fileLoc))
    data = json.load(json_data)
    path_parent = os.path.dirname(arcpy.env.workspace)
    copyfile(fileLoc, path_parent + "\\" + "infrastructures_inputs.txt")
    defaultPath = GUI_Tool_Location + "\\default.csv"
    copyfile(defaultPath, path_parent + "\\" + "default.csv")
    inputsFile = GUI_Tool_Location + "\\report_inputs.txt"
    copyfile(inputsFile, path_parent + "\\" + "report_inputs.txt")

    SensitivityFolder = GUI_Tool_Location + "\\Sensitivity Images"
    if os.path.isdir(path_parent + "\\Sensitivity Images"):
        shutil.rmtree(path_parent + "\\Sensitivity Images")

    destination = shutil.copytree(SensitivityFolder, path_parent + "\\Sensitivity Images")

    sensitivityExe = GUI_Tool_Location + "\\sensitivity_GUI.exe"
    copyfile(sensitivityExe, path_parent + "\\sensitivity_GUI.exe")
    
    n0new = [water_percent, energy_percent, transport_percent, comm_percent, government_percent,
             agriculture_percent, emergency_percent, waste_percent, healthcare_percent]
    #arcpy.AddMessage(n0new)
    if arcpy.Exists(Contaminated_Dataset):
        contamnew = [water_percent_contaminated, energy_percent_contaminated, transport_percent_contaminated, comm_percent_contaminated, government_percent_contaminated,
             agriculture_percent_contaminated, emergency_percent_contaminated, waste_percent_contaminated, healthcare_percent_contaminated]
    else: contamnew = [0,0,0,0,0,0,0,0,0]
    #arcpy.AddMessage(contamnew)
    data["n0"] = n0new
    data["contamination"] = contamnew
    inputsPath = os.path.join(GUI_Tool_Location, "infrastructures_inputs.txt")
    arcpy.AddMessage(GUI_Tool_Location)
    with open(inputsPath, "w") as outfile:
        json.dump(data, outfile)
    with open(path_parent + "\\" + "infrastructures_inputs.txt", "w") as outfile:
        json.dump(data, outfile)
    if arcpy.Exists(Contaminated_Dataset):
        fillOut(GUI_Tool_Location + "\\DefineScenario.xlsx", Contaminated_Dataset, Infrastructure_Dataset, OutputPath, GUI_Tool_Location, BPPMin, BPPMax)
    newPath = wrapArg(GUI_Tool_Location +  "\\infrastructures_gui.exe")

    os.chdir(GUI_Tool_Location)
    command_prompt = "cmd /k " + newPath
    os.system(command_prompt)
    
def createLayerFromAPI(url, name, OutputPath):
    outputLocation= OutputPath + "\\"+name
    response = urllib.request.urlopen(url)
    path_parent = os.path.dirname(arcpy.env.workspace)
    #data = json.loads(response.read())
    data = requests.get(url).json()
    path = outputLocation + ".json"
    with open(path, 'w+') as f:
        json.dump(data, f, indent=2)
    outputLayer = outputLocation + ".shp"
    arcpy.JSONToFeatures_conversion(path, outputLayer, "POINT")
    path_to_layer= OutputPath + "\\"+name + "_layer.lyr"
    arcpy.MakeFeatureLayer_management(outputLayer,name)
    newlayer = arcpy.SaveToLayerFile_management(name, path_to_layer, "ABSOLUTE")
    p = arcpy.mp.ArcGISProject("CURRENT")
    m = p.activeMap
    lyr = m.addDataFromPath(newlayer)
    #getLayerStyle(name, lyr)
    #lyr.visible = True

def getArea(name, shapefile, Infrastructure_Dataset, ScenarioDataset, buffer, OutputPath, farmland = False):
        arcpy.env.overwriteOutput = True
        path_parent = os.path.dirname(arcpy.env.workspace)
        sector_in_area = OutputPath + "\\possible_"+name + ".shp"
        arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [shapefile, ""]],
                             out_feature_class=sector_in_area, join_attributes="ALL", cluster_tolerance="",
                                 output_type="INPUT")
        buffered_in_area =arcpy.env.workspace + "\\buffered_"+name
        arcpy.Buffer_analysis(sector_in_area, buffered_in_area, buffer, "FULL", "ROUND")
        dissolved_sector = arcpy.env.workspace + "\\dissolved_"+name
        arcpy.Dissolve_management(buffered_in_area, dissolved_sector)
        affected_sector = OutputPath + "\\affected_"+name
        affected_buffered_sector = OutputPath + "\\affected_buffered_"+name
        arcpy.Intersect_analysis(in_features=[dissolved_sector,ScenarioDataset],
                                 out_feature_class=affected_sector,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp",
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        affected_stats = arcpy.env.workspace + "\\affected_stats_"+name
        arcpy.analysis.Statistics(in_table=affected_sector+".shp", out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        cursor = arcpy.da.SearchCursor(affected_stats, "SUM_AREA_GEO")
        results = 0
        count = 0
        for row in cursor:
            results = row[0]
            count +=1
        area_contaminated = results
        arcpy.AddMessage(name+ " " + str(area_contaminated))
        return area_contaminated

def getBuildingFootprint(name, shapefile, Infrastructure_Dataset, ScenarioDataset, buffer, OutputPath, farmland = False):
        arcpy.env.overwriteOutput = True
        path_parent = os.path.dirname(arcpy.env.workspace)
        sector_in_area = OutputPath + "\\possible_"+name + ".shp"
        arcpy.AddMessage("Getting intersection")
        arcpy.Intersect_analysis(in_features=[[Infrastructure_Dataset, ""], [shapefile, ""]],
                             out_feature_class=sector_in_area, join_attributes="ALL", cluster_tolerance="",
                                 output_type="INPUT")
        dissolved_sector = arcpy.env.workspace + "\\dissolved_"+name
        arcpy.AddMessage("Getting dissolve")
        arcpy.Dissolve_management(sector_in_area, dissolved_sector)
        affected_sector = OutputPath + "\\affected_"+name
        affected_buffered_sector = OutputPath + "\\affected_buffered_"+name
        arcpy.AddMessage("Getting intersection")
        arcpy.Intersect_analysis(in_features=[dissolved_sector,ScenarioDataset],
                                 out_feature_class=affected_sector,join_attributes="ALL",
                                 cluster_tolerance="", output_type="INPUT")
        arcpy.management.AddGeometryAttributes(Input_Features=affected_sector+".shp",
                                               Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
        affected_stats = arcpy.env.workspace + "\\affected_stats_"+name
        arcpy.analysis.Statistics(in_table=affected_sector+".shp", out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]],
                                  case_field=[])
        cursor = arcpy.da.SearchCursor(affected_stats, "SUM_AREA_GEO")
        results = 0
        count = 0
        for row in cursor:
            results = row[0]
            count +=1
        area_contaminated = results
        arcpy.AddMessage(name+ " " + str(area_contaminated))
        return area_contaminated

def fillOut(excelDoc, ScenarioDataset, Infrastructure_Dataset, OutputPath, GUI_Tool_Location, BPPMin, BPPMax):
    spreadsheet = pd.read_excel(excelDoc, sheet_name="Extent of Contamination")
    copy = OutputPath + "\\copied_features.shp"
    arcpy.CopyFeatures_management(ScenarioDataset, copy)
    arcpy.management.AddGeometryAttributes(Input_Features=ScenarioDataset,Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
    cursor = arcpy.da.SearchCursor(ScenarioDataset, "AREA_GEO")
    area  = 0
    for row in cursor:
        arcpy.AddMessage("Area " + str(row))
        area += float(row[0])
    spreadsheet.loc[spreadsheet.Description == "The total outdoor surface area contaminated", "Parameter 1"] = area
    #Government
    government = getArea("government", "Major_State_Government_Buildings_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.1 Mile", OutputPath)
    #Industrial Datasets
    industrial = getArea("plants", "Power_Plants_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.1 Mile", OutputPath)


    #Schools

    public_schools = getArea("public_schools", "Public_Schools_HIFLD", Infrastructure_Dataset,ScenarioDataset, "0.1 Mile", OutputPath)

    private_schools = getArea("private_schools", "Private_Schools_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.1 Mile", OutputPath)

    colleges = getArea("colleges", "Colleges_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.01 Mile", OutputPath)
 
    #Commercial

    commerical = getArea("corporate", "Corporate_HIFLD", Infrastructure_Dataset,ScenarioDataset, "0.1 Mile", OutputPath)
 
    #Water
    #Add water dataset?

    #Religious
    

    worship = getArea("worship", "Worship_HIFLD", Infrastructure_Dataset,ScenarioDataset, "0.01 Mile", OutputPath) 

    agri = getArea("agri", "USA_Farms", Infrastructure_Dataset,
                                       ScenarioDataset, "50 Mile", OutputPath)

    industrial2 = getArea("industrial", "Industrial_HIFLD", Infrastructure_Dataset,
                                       ScenarioDataset, "0.1 Mile", OutputPath)

    #other Datasets
    (waste_contaminated) = round(getArea("landfills", "Landfills_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath, True),2)
    (ports_contaminated) = getArea("ports", "Ports_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath, True)
    (power_plants_contaminated) = getArea("plants", "Power_Plants_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath, True)
    (wastewater_contaminated) = getArea("wastewater", "Wastewater_Treatment_Plants_HIFLD", Infrastructure_Dataset,
                             ScenarioDataset, "0.1 Mile", OutputPath, True)
    (hospitals_contaminated) = getArea("hospitals", "Hospital_Locations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath, True)

    (comm_contaminated) = getArea("cell", "Cellular_Towers_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.05 Mile", OutputPath, True)
    (broadcast_contaminated) = getArea("broad", "Land_Mobile_Broadcast_Tower_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.05 Mile", OutputPath, True)
    (ems_contaminated) = getArea("ems", "Emergency_Medical_Center_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath, True)
    (roads_contaminated) = getArea("roads", "USA_Roads", Infrastructure_Dataset, ScenarioDataset, "0.1 Mile", OutputPath, True)
    (fire_contaminated) = getArea("fire", "Fire_Stations_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.05 Mile", OutputPath, True)
    (farm_contaminated) = getArea("farms", "USA_Farms", Infrastructure_Dataset, ScenarioDataset, "10 Mile", OutputPath, True)
    (electricgrid_contaminated) = getArea("grid", "Transmission_HIFLD", Infrastructure_Dataset, ScenarioDataset, "0.01 Mile", OutputPath, True)
    #roofs = sum(areas)
    #building_exteriors = sum(areas)
    school_areas = public_schools + private_schools + colleges
    industrial_area = industrial + industrial2
    government_area = government
    affected_stats = arcpy.env.workspace + "\\affected_total"
    # other areas
    #arcpy.management.AddGeometryAttributes(Input_Features=ScenarioDataset, Geometry_Properties=["AREA_GEODESIC"], Area_Unit="Square meters")
    #arcpy.analysis.Statistics(in_table=ScenarioDataset, out_table=affected_stats, statistics_fields=[["AREA_GEO", "SUM"]],case_field=[])
    #cursor = arcpy.da.SearchCursor(affected_stats, ["SHAPE@AREA"])
    # results = 0
    # count = 0
    # for row in cursor:
        # results += float(row[0])
        # arcpy.AddMessage(results)
        # count +=1
    total_outdoor = area
    arcpy.AddMessage("Total Area " + str(total_outdoor))
    area_contaminated = sum([industrial_area, commerical, worship,
                 school_areas, government_area, agri, waste_contaminated, ports_contaminated,
                             power_plants_contaminated, wastewater_contaminated, hospitals_contaminated, comm_contaminated,
                             broadcast_contaminated, ems_contaminated, fire_contaminated, electricgrid_contaminated])

##    dicts = {
##        "category":["Industrial","Commercial","Religious","Education", "Government","Agricultural", "Total Indoor Min", "Total Indoor Max", "Total Outdoor"],
##        "units":["", "", "", "", "", "", "m^2","m^2", "m^2"],
##        "value":[industrial_area/area_contaminated, commerical/area_contaminated, worship/area_contaminated,
##                 school_areas/area_contaminated, government_area/area_contaminated, agri/area_contaminated,
##                 area_contaminated*(1.0-float(BPPMax)),area_contaminated*(1.0-float(BPPMin)), total_outdoor]
##        }
    arcpy.AddMessage("Getting Buildings")
##    total = getBuildingFootprint("footprint", "MSBFP", Infrastructure_Dataset,
##                                       ScenarioDataset, "0 Mile", OutputPath)
##    area_contaminated = total
    if(area_contaminated == 0):
        industrial_percent = 0
        commericial_percent = 0
        worship_percent = 0
        school_percent = 0
        government_percent = 0
        agri_percent = 0
    else:
        industrial_percent = industrial_area/area_contaminated
        commericial_percent = commerical/area_contaminated
        worship_percent = worship/area_contaminated
        school_percent = school_areas/area_contaminated
        government_percent = government_area/area_contaminated
        agri_percent = agri/area_contaminated

    dicts = {
        "category":["Industrial","Commercial","Religious","Education", "Government","Agricultural", "Total Indoor", "Total Outdoor"],
        "units":["", "", "", "", "", "", "m^2", "m^2"],
        "value":[industrial_percent, commericial_percent, worship_percent,
                 school_percent, government_percent, agri_percent, area_contaminated*(1.0-float(BPPMin)), total_outdoor]
        }
    
##    arcpy.AddMessage(sum([industrial_area/area_contaminated, commerical/area_contaminated, worship/area_contaminated,
##                 school_areas/area_contaminated, government_area/area_contaminated, agri/area_contaminated]))
    #write out information from the tool into its own 
    df2 = pd.DataFrame(dicts)
    new_loc = GUI_Tool_Location + "\\SIRMResults.json"
    #arcpy.AddMessage(df2)
    spreadsheet.reset_index(inplace=True)
    df2.to_json(new_loc, orient="table", indent=0)
            
if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=arcpy.env.workspace, workspace=arcpy.env.workspace):
        #arcpy.AddMessage("Entering script")
        argsFixed = argv[1:]
        for a in range(len(argsFixed)):
            if a > 1:
                argsFixed[a] = wrapArg(argsFixed[a])
                        
        #EfficiencyCalculator(*(argsFixed))
        #arcpy.AddMessage("Entering script")
        EfficiencyCalculator(*argv[1:])




